
SCHEMA - 
table design


Primary key combo - 
primary key (id,name) this means that combo of them together 
makes up the primary key

Foreign key syntax -
foreign key () references table_name ()
some operators - 
In, not in  - array
between 10 and 100 like kotlin 100..200


Having clause -
Usually used after grouping for conditions.where cannot be used after grouping!!
Having applies to the grouped data.

Update-
set sql_safe_updates = 0;
update student 
set age = 63
where name='Idli';

Cascade - 
Make respective changes when key value changes
on update cascade
on delete cascade


Alter - 
Add column,remove column, rename 
alter table NAME
add/drop/rename to

Change - 
alter table NAME change column OLDNAME NEWNAME DataType

Modify-
alter table NAME modify COLNAME new_DataType

Truncate - empty the table

Delte - delete from TABLENAME where CONDITION

Joins - used to combine rows of two or more tables

Inner join - select * from student inner join course
on student.id = course.id
Left join - same just left join
Full Join - combine left and right join with union clause.
e.g 
{
	select name,course from student 
	left join course on 
	student.id = course.id
	union
	select name,course from student 
	right join course on 
	student.id = course.id;
}

Exclusive join - write the same query and then where course.id is null;
Self join - use aliases for both and join

TypeAlias - select student as s;

Union - used to combine result of select statements! Gives unique vals~
Union All - gives duplicates

SubQueries - 

Views - Temporary tables that can be used to view data.

Contains - 
	like '%char%' 

Starts with
	like 'a%'

Create Functions - 

	delimiter //
	create procedure funcName()
	BEGIN
		CodeBlock
	END//
	delimiter ;

*With paras
	create procedure addition(IN id int not null)

Create Indexes
	create index myIndex on student(studId);
	show indexes from student;
	

Create Triggers!!
	set sql_safe_updates =0;

	create table employee(
		id int not null primary key,
		name varchar(50),
		hourlyPay int not null
	);

	create trigger beforeHourlyPayUpdate 
	before update on employee
	for each row
	set new.salary = (new.hourlyPay * 2080);

	update employee 
	set hourlyPay = 25
	where id = 104;

-------------------------------------------------------------------


SOME MONGODB-

db.createCollection("name")

db.students.insertOne({})

db.students.insertMany([{},{},{}])


Select -
db.students.find()

Date - 
date : newDate() or newDate('2020-05-12')

Sorting-
	db.students.find().sort({name:1}) // 1 for ASC, -1 for DESC


college> db.students.find({CONDITIONS},{name : true})
//the paras u want in the 2nd bracket

e.g db.students.find({age:22},{name:true})

REMOVE A FIELD FROM AN OBJ
	db.students.updateOne( {_id:''},{$unset:{age:''} } )

UPDATE
	db.students.updateOne( {name:''},{$set:{age:''} } )

UPDATE 	IF A FIELD DOESNT EXIST
	db.students.updateMany({fullTime:{exists:false}},{$set:{fullTime:true}})

DELETE
	db.students.deleteOne({age:20})

FILTERING -
*Not Equal To
	db.students.find({name:{$ne:'Idli'}}) //ne - not equal
*Less than
	db.students.find({age: {$lt:20}})  // less than (also lte,gt,gte)

*Range operation
	 db.students.find({ age : { $gte:18,$lte:30 } })

*In operator ( in & nin )
	db.students.find({ age:{ $in:[17,18,19,20,21,22] } })

*Logical operators
	db.students.find({$and:[ {name:'Gojo'},{age:{$lte:25} } ]})

*Get MAX MONGODB-
	db.item.find().sort({price:-1}).limit(1)

*Group By In MONGODB-
	 db.item.aggregate([  {$group:{_id:'$brand',count:{$sum:1}  } }])

*count group by
	db.item.aggregate([  {$group :{_id:'$brand',count:{ $sum:'$price' }}} ])

INDEXING
	db.COLLECTION_NAME.createIndex({KEY: 1})
	db.items.showIndexes();

========================================================
QUESTIONS
Q3 - 3
	select deptNo,min(salary) from emp group by deptNo
	having deptNo = 101
	union
	select deptNo,max(salary) from emp group by deptNo
	having deptNo = 102


select dateOfIssue,group_cocat(rollNo) from borrower
group by dateOfIssue;














